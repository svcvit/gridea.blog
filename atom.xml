<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://svcvit.github.io</id>
    <title>小众需求</title>
    <updated>2019-09-23T00:00:07.180Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://svcvit.github.io"/>
    <link rel="self" href="https://svcvit.github.io/atom.xml"/>
    <subtitle>一些很小众的需求，往往需要自己找答案。</subtitle>
    <logo>https://svcvit.github.io/images/avatar.png</logo>
    <icon>https://svcvit.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, 小众需求</rights>
    <entry>
        <title type="html"><![CDATA[Scrapy 使用教程]]></title>
        <id>https://svcvit.github.io/post/scrapy</id>
        <link href="https://svcvit.github.io/post/scrapy">
        </link>
        <updated>2019-09-20T04:30:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="创建项目">创建项目</h3>
<p><code>scrapy startproject project_name</code></p>
<h3 id="创建爬虫">创建爬虫</h3>
<p><code>scrapy genspider web hostname</code></p>
<h3 id="定义数据">定义数据</h3>
<p>这里定义需要保存的数据，编辑<code>items.py</code></p>
<pre><code class="language-python">class InfoItem(scrapy.Item):
    title = scrapy.Field
    link = scrapy.Field
    desc  = scrapy.Field
</code></pre>
<h3 id="编辑-webpy">编辑 web.py</h3>
<pre><code class="language-python">from tutorial.items import InfoItem

class WebSpider(scrapy.Spider):
    name = &quot;web&quot;
    allowed_domains = [&quot;hostname&quot;]
    start_urls = [
        &quot;http://www.chinadrugtrials.org.cn/eap/clinicaltrials.searchlist&quot;
    ]

    def parse(self, response):
        item = InfoItem()
        item['title'] = response.xpath('//*[@id=&quot;searchfrm&quot;]/div/div[3]/div[1]/a[1]/text()').extract()[0]
        yield item
</code></pre>
<h3 id="或者再写一个爬虫">或者再写一个爬虫</h3>
<pre><code class="language-python">
class DetailSpider(scrapy.Spider):
    name = 'detail'
    allowed_domains = ['www.chinadrugtrials.org.cn']
    
    def start_requests(self):
        url = 'http://www.chinadrugtrials.org.cn/eap/clinicaltrials.searchlistdetail'
        for i in range(0,9058):
            params = {'currentpage':'',
                    'keywords':&quot;&quot;,
                    'pagesize':'20',
                    'sort':'desc',
                    'sort2':'desc',
                    'rule':'CTR',
                    'reg_no':'CTR'}
            params['ckm_index'] = str(i+1)
            yield scrapy.FormRequest(url,method=&quot;POST&quot;,formdata =params,callback=self.parse)

    def parse(self, response):
        # 保存文件
        filename = response.xpath('/html/body/div[1]/table/tbody/tr[2]/td/div[2]/div/div[2]/div[1]/div[3]/table/tr[1]/td[2]/text()').extract()[0]
        print(filename)
        with open(&quot;html/&quot;+filename+&quot;.html&quot;, 'wb') as f:
            f.write(response.body)
</code></pre>
<h3 id="存储数据到-pgsql">存储数据到 pgsql</h3>
<p>编辑pipelines.py文件</p>
<pre><code class="language-python">from twisted.enterprise import adbapi 
import psycopg2

class detail2Pipeline(object):
    @classmethod
    def from_settings(cls,settings):#名称固定 会被scrapy调用 直接可用setting的值
        db = settings['MYSQL_DB_NAME']
        host = settings['MYSQL_HOST']
        port = settings['MYSQL_PORT']
        user = settings['MYSQL_USER']
        passwd = settings['MYSQL_PASSWORD']
        #创建连接池对象，用pymysql访问数据库
        dbpool = adbapi.ConnectionPool(&quot;psycopg2&quot;,host = host,port = port, database= db,user=user,password=passwd)
        return cls(dbpool)

    def __init__(self,dbpool):
        self.dbpool=dbpool

    def process_item(self, item, spider):
        #去调用insert_db函数
        self.dbpool.runInteraction(self.insert_db,item)
        return item

    def insert_db(self, tx, item):
        values = (
        item[&quot;Registrationd_number&quot;] ,
        item[&quot;Testd_condition&quot;] ,
        item[&quot;Bidderd_Contact&quot;] ,
        item[&quot;Dated_ofd_firstd_publicd_announcement&quot;] ,
        item[&quot;Named_ofd_applicant&quot;]
        )
        try:
            sql = 'INSERT INTO &quot;DetailTrial&quot; (&quot;Registrationd_number&quot;,&quot;Testd_condition&quot;,&quot;Bidderd_Contact&quot;,&quot;Dated_ofd_firstd_publicd_announcement&quot;,&quot;Named_ofd_applicant&quot;) VALUES (%s,%s,%s,%s,%s)'
            tx.execute(sql, values)
            print(&quot;数据插入成功&quot;)
        except Exception as e:
            print('数据插入错误:', e)

    def close_spider(self,spider):
        self.dbpool.close()
</code></pre>
<h3 id="执行爬虫">执行爬虫</h3>
<p>将数据输出到json文件<br>
<code>scrapy crawl web -o items.json</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何让你的小白朋友和你一样科学上网]]></title>
        <id>https://svcvit.github.io/post/LEDE</id>
        <link href="https://svcvit.github.io/post/LEDE">
        </link>
        <updated>2019-09-05T01:37:51.000Z</updated>
        <content type="html"><![CDATA[<p>因为工作的关系，有很多需要正当科学上网的需求，周围有些朋友也会有这样的需求。以前，我一般是推荐他们购买一些节点服务，买一个支持小火箭的App，就可以正常使用了，但是，他们会经常遇到一些问题，包括节点失效，订阅链接失效等等。这样不得不再次求助你，所以，最近我使用了一个更一劳永逸的方法，解决这个问题。</p>
<h3 id="思路">思路</h3>
<figure data-type="image" tabindex="1"><img src="https://svcvit.github.io/post-images/1567648458489.jpg" alt=""></figure>
<h3 id="优点">优点</h3>
<ul>
<li>成本低，只要一个域名就可以了</li>
<li>相对安全，因为家用宽带，IP每次重启会变更</li>
<li>容易维护，只要你保持家里的LEDE能上网，你的朋友就都能上网</li>
</ul>
<h3 id="方法">方法</h3>
<ul>
<li>安装Koolddns，使用阿里云动态DNS服务解析到你家的路由器</li>
<li>v2ray 开启 socks5 代理，允许外网访问</li>
</ul>
<p>更多信息，可以参考我的<a href="https://www.youtube.com/watch?v=E7rmgv5X1Gs">youtube视频 </a><br>
顺便推荐一个我用的不错的v2ray的机场，这个机场需要能正常翻墙才能访问，所以可靠性一直很高，原因你懂的。 <a href="https://my.v2fly.net/aff.php?aff=809">https://my.v2fly.net/aff.php?aff=809</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[FRPS 的自动启动]]></title>
        <id>https://svcvit.github.io/post/frps</id>
        <link href="https://svcvit.github.io/post/frps">
        </link>
        <updated>2019-08-28T02:23:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="linux-篇">Linux 篇</h2>
<p>如果是Linux服务器，譬如我用的centos 7.5，配置系统启动如下：</p>
<h3 id="创建service文件">创建service文件</h3>
<pre><code>vi /etc/systemd/system/frps.service
</code></pre>
<h3 id="配置启动信息">配置启动信息</h3>
<pre><code>[Unit]
Description=frps daemon
[Service]
Type=simple
ExecStart=/home/frps/frps -c /home/frps/frps.ini
[Install]
WantedBy=multi-user.target
</code></pre>
<h3 id="启动">启动</h3>
<p>启动：<code>systemctl start frps</code><br>
自动启动：<code>systemctl enable frps</code></p>
<h2 id="windows-篇">Windows 篇</h2>
<p>如果是Windows服务器。可以使用<a href="https://github.com/kohsuke/winsw">winsw</a>。将<code>winsw.exe</code>文件和<code>frpc.exe</code>放在一个目录下</p>
<h3 id="创建winswxml">创建winsw.xml</h3>
<pre><code>&lt;service&gt;
    &lt;id&gt;frp&lt;/id&gt;
    &lt;name&gt;frp&lt;/name&gt;
    &lt;description&gt;frp remote control&lt;/description&gt;
    &lt;executable&gt;frpc&lt;/executable&gt;
    &lt;arguments&gt;-c frpc.ini&lt;/arguments&gt;
    &lt;logmode&gt;reset&lt;/logmode&gt;
&lt;/service&gt;
</code></pre>
<h3 id="安装服务">安装服务</h3>
<p>使用管理员分身运行powershell</p>
<pre><code>winsw install
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PowerBI 一些笔记]]></title>
        <id>https://svcvit.github.io/post/powerbi</id>
        <link href="https://svcvit.github.io/post/powerbi">
        </link>
        <updated>2019-08-18T00:23:17.000Z</updated>
        <content type="html"><![CDATA[<p>PowerBI很多时候看起来很好用，如果能学的很深入，应该也很好用，但是PowerBI真的挺难理解的，相对于很多编程语言来讲，最近用了一下，记录一些DAX的写法。</p>
<h3 id="按序列做排名">按序列做排名</h3>
<p>RANKX 默认做排名的时候，如果遇到相同的数值，要么重复排名后跳过，要么重复排名之后顺序，但是没有办法将重复排名变成序列，查了一下写法，可以添加一个行号参与运算，这样计算时就没有重复数值了：</p>
<p><code>今日排名 = RANKX(ALL('public ALL_Relation'[销售]),[统计值]+[sum_index]/100000,,DESC)</code></p>
<p>但是，这样做出来的排名，如果放置2列，例如：「地区经理」，「销售」那么整个表格会按照不同的地区经理，单独计算每个销售在该地区经理下面的用户的排名。但是我们是希望按一个总监下的所有销售做排名，增加一列仅仅是展示销售的上级，而不影响排名，那么就需要增加<code>ALLEXCEPT</code>，写法就变成了这样：</p>
<p><code>今日排名 = CALCULATE(RANKX(ALL('public ALL_Relation'[销售]),[统计值]+[sum_index]/100000,,DESC),ALLEXCEPT('public ALL_Relation','public ALL_Relation'[销售],'public ALL_Relation'[总监]))</code></p>
<h3 id="统计ytd">统计YTD</h3>
<p><code>统计数值 YTD = CALCULATE([统计数值],DATESYTD('日期表'[Date]))</code></p>
<h3 id="统计mtd">统计MTD</h3>
<p><code>统计数值 MTD = TOTALMTD(COUNTA('public ALL'[ID]),'日期表'[Date])</code></p>
<h3 id="统计wtd">统计WTD</h3>
<p><code>统计数值 WTD = CALCULATE([统计数值],FILTER(ALL('日期表'),'日期表'[YearWeek]=SELECTEDVALUE('日期表'[YearWeek])))</code></p>
<h3 id="今日数据">今日数据</h3>
<p><code>今日数据 = CALCULATE( [统计数值],'public ALL'[日期] = today())+0</code></p>
<h3 id="本月数据">本月数据</h3>
<p><code>本月数据 = CALCULATE( [统计数值],int(YEAR('public ALL'[日期]))&amp;int(MONTH('public ALL'[日期])) = int(YEAR(today()))&amp;int(MONTH(TODAY())))+0</code></p>
<h3 id="当前用户">当前用户</h3>
<p><code>当前 用户 = USERNAME()</code></p>
<h3 id="当前用户名">当前用户名</h3>
<p><code>当前用户名 = CALCULATE(VALUES('UserInfo'[Name]),FILTER('UserInfo','UserInfo'[Email] in {USERNAME()}))</code></p>
<h3 id="当前用户数">当前用户数</h3>
<p>先将数据表关联到权限关系表：<br>
<code>当前用户数 = CALCULATE([统计数值],FILTER('Permissions','Permissions'[Email]=USERNAME()))</code></p>
<h3 id="刷新时间">刷新时间</h3>
<p>添加辅助列<br>
<code>RefreshDate = NOW()</code></p>
<h3 id="过滤外部筛选器">过滤外部筛选器</h3>
<p><code>user_count = CALCULATE(COUNTA('data'[user_ID]),'data'[col2]=BLANK(),int(YEAR('data'[CreatedAt]))&amp;int(MONTH('data'[CreatedAt])) = int(YEAR(today()))&amp;int(MONTH(TODAY())),ALLEXCEPT(data,Relation[总监],Relation[大区经理],Relation[区域经理],Relation[销售]))</code><br>
过滤掉全局的筛选器</p>
<h3 id="判断两列的数值生成一列">判断两列的数值生成一列</h3>
<p><code>New = IF(and('Permissions'[A]&gt;0,'Permissions'[B]&gt;0),&quot;ALL&quot;,(IF('Permissions'[A]&gt;0,&quot;A&quot;,&quot;B&quot;)))</code></p>
<h3 id="是否是昨日数据">是否是昨日数据</h3>
<p><code>is_today = if('ALL'[日期] = today(),&quot;Today&quot;,(IF(DATEADD('ALL'[日期],1,DAY) = today(),&quot;Yesterday&quot;,&quot;OLD&quot;)))</code></p>
<h3 id="是否当月数据">是否当月数据</h3>
<p><code>is_当月 = if(and(INT('ALL'[日期_年])=YEAR(today()),int('ALL'[日期_月])=MONTH(TODAY())),&quot;YES&quot;,&quot;NO&quot;)</code></p>
<h3 id="用户权限">用户权限</h3>
<p>用户权限应该使用「管理角色」方式进行处理，如果直接在DAX里控制权限，当整个数据统计过多之后，工作量将倍增。而且DAX无法应用与筛选器，这样就导致低层级用户可以看到高层级用户的筛选项。所以在创建数据结构关系的时候，可以将不同身份变成不同的关联表，方便日后筛选数据</p>
<figure data-type="image" tabindex="1"><img src="https://svcvit.github.io/post-images/1566286552331.jpg" alt=""></figure>
<p>1、声明一个user_name = &quot;test@abc.com&quot; 用于测试角色<br>
2、发布之后，将user_name = USERNAME()</p>
<h3 id="添加日期表">添加日期表</h3>
<pre><code>let

    CalendarType =  type function (

        optional CalendarYearStart as (type number meta [
            Documentation.FieldCaption = &quot;开始年份，日期表从开始年份1月1日起。&quot;,
            Documentation.FieldDescription = &quot;日期表从开始年份1月1日起&quot;,
            Documentation.SampleValues = { Date.Year( DateTime.LocalNow( ) ) - 1 } // 去年
        ]),

        optional CalendarYearEnd as (type number meta [
            Documentation.FieldCaption = &quot;结束年份，日期表至结束年份12月31日止。&quot;,
            Documentation.FieldDescription = &quot;日期表至结束年份12月31日止&quot;,
            Documentation.SampleValues = { Date.Year( DateTime.LocalNow( ) ) } // 今年
        ]),

        optional CalendarFirstDayOfWeek as (type text meta [
            Documentation.FieldCaption = &quot;定义一周开始日，从 Monday，Tuesday，Wednesday，Thursday，Friday，Saturday，Sunday中选择一个，缺省默认为Monday。&quot;,
            Documentation.FieldDescription = &quot;从 Monday，Tuesday，Wednesday，Thursday，Friday，Saturday，Sunday中选择一个，缺省默认为Monday。&quot;,
            Documentation.SampleValues = { &quot;Monday&quot; }
        ]),

        optional CalendarCulture as (type text meta [
            Documentation.FieldCaption = &quot;指定日期表显示月以及星期几的名称是中文或英文，en 表示英文，zh 表示中文，缺省默认与系统一致。&quot;,
            Documentation.FieldDescription = &quot; en 表示英文，zh 表示中文，缺省默认与系统一致。&quot;,
            Documentation.SampleValues = { &quot;zh&quot; }
        ])

    ) 
    as table meta [
        Documentation.Name = &quot;构建日期表&quot;,
        Documentation.LongDescription = &quot;创建指定年份之间的日期表。并可进行各种设置。&quot;,
        Documentation.Examples = {
        [
            Description = &quot;返回当前年份日期表&quot;,
            Code = &quot;CreateCalendar()&quot;,
            Result = &quot;当前年份日期表。&quot;
        ],
        [
            Description = &quot;返回指定年份的日期表&quot;,
            Code = &quot;CreateCalendar( 2017 )&quot;,
            Result = &quot;返回2017/01/01至2017/12/31之间的日期表。&quot;
        ],
        [
            Description = &quot;返回起止年份之间的日期表&quot;,
            Code = &quot;CreateCalendar( 2015 , 2017 )&quot;,
            Result = &quot;返回2015/01/01至2017/12/31之间的日期表。&quot;
        ],
        [
            Description = &quot;返回起止年份之间的日期表，并指定周二为每周的第一天&quot;,
            Code = &quot;CreateCalendar( 2015 , 2017 , &quot;&quot;Tuesday&quot;&quot; )&quot;,
            Result = &quot;2015/01/01至2017/12/31之间的日期表，且周二是每周的第一天。&quot;
        ],
        [
            Description = &quot;返回起止年份之间的日期表，并指定周二为每周的第一天，并使用英文显示名称。&quot;,
            Code = &quot;CreateCalendar( 2015 , 2017 , &quot;&quot;Tuesday&quot;&quot;, &quot;&quot;en&quot;&quot; )&quot;,
            Result = &quot;2015/01/01至2017/12/31之间的日期表，且周二是每周的第一天，并使用英文显示月名称及星期几的名称。&quot;
        ]
        }
    ],


    CreateCalendar = ( optional CalendarYearStart as number, optional CalendarYearEnd as number, optional CalendarFirstDayOfWeek as text, optional  CalendarCulture as text) =&gt; let
        begin_year = CalendarYearStart ,
        end_year = CalendarYearEnd ,
        first_day_of_week = if Text.Lower( CalendarFirstDayOfWeek ) = &quot;monday&quot; then Day.Monday
                            else if Text.Lower( CalendarFirstDayOfWeek ) = &quot;tuesday&quot; then Day.Tuesday
                            else if Text.Lower( CalendarFirstDayOfWeek ) = &quot;wednesday&quot; then Day.Wednesday
                            else if Text.Lower( CalendarFirstDayOfWeek ) = &quot;thursday&quot; then Day.Thursday
                            else if Text.Lower( CalendarFirstDayOfWeek ) = &quot;friday&quot; then Day.Friday
                            else if Text.Lower( CalendarFirstDayOfWeek ) = &quot;saturday&quot; then Day.Saturday
                            else if Text.Lower( CalendarFirstDayOfWeek ) = &quot;sunday&quot; then Day.Sunday
                            else if CalendarFirstDayOfWeek &lt;&gt; null then error &quot;参数错误：参数CalendarFirstDayOfWeek必须是Monday，Tuesday，Wednesday，Thursday，Friday，Saturday，Sunday中的一个。&quot;
                            else Day.Monday ,
        culture = if CalendarCulture &lt;&gt; null then CalendarCulture else null , // &quot;en&quot; , &quot;zh&quot;
        y1 = if begin_year &lt;&gt; null then begin_year else if end_year &lt;&gt; null then end_year else Date.Year( DateTime.LocalNow() ) ,
        y2 = if end_year &lt;&gt; null then end_year else if begin_year &lt;&gt; null then begin_year else Date.Year( DateTime.LocalNow() ) ,
        calendar_list = { Number.From ( #date( Number.From( y1 ) , 1 , 1 ) ) .. Number.From( #date( Number.From( y2 ) , 12, 31 ) ) },
        calendar_list_table = Table.FromList(calendar_list, Splitter.SplitByNothing(), null, null, ExtraValues.Error),        #&quot;Changed Type&quot; = Table.TransformColumnTypes(calendar_list_table,{{&quot;Column1&quot;, type date}}),
        #&quot;Renamed Columns&quot; = Table.RenameColumns(#&quot;Changed Type&quot;,{{&quot;Column1&quot;, &quot;Date&quot;}}),
        #&quot;Inserted Year&quot; = Table.AddColumn(#&quot;Renamed Columns&quot;, &quot;Year&quot;, each Date.Year([Date]), Int64.Type),
        #&quot;Inserted Quarter&quot; = Table.AddColumn(#&quot;Inserted Year&quot;, &quot;Quarter&quot;, each Date.QuarterOfYear([Date]), Int64.Type),
        #&quot;Inserted Month&quot; = Table.AddColumn(#&quot;Inserted Quarter&quot;, &quot;Month&quot;, each Date.Month([Date]), Int64.Type),
        #&quot;Inserted Week of Year&quot; = Table.AddColumn(#&quot;Inserted Month&quot;, &quot;WeekOfYear&quot;, each Date.WeekOfYear( [Date] , first_day_of_week ), Int64.Type),
        #&quot;Inserted Week of Month&quot; = Table.AddColumn(#&quot;Inserted Week of Year&quot;, &quot;WeekOfMonth&quot;, each Date.WeekOfMonth( [Date] ), Int64.Type),
        #&quot;Inserted Start of Week&quot; = Table.AddColumn(#&quot;Inserted Week of Month&quot;, &quot;DateOfWeekStart&quot;, each Date.StartOfWeek( [Date] ), type date),
        #&quot;Inserted End of Week&quot; = Table.AddColumn(#&quot;Inserted Start of Week&quot;, &quot;DateOfWeekEnd&quot;, each Date.EndOfWeek([Date]), type date),
        #&quot;Inserted Day&quot; = Table.AddColumn(#&quot;Inserted End of Week&quot;, &quot;DayOfMonth&quot;, each Date.Day([Date]), Int64.Type),
        #&quot;Inserted Day of Week&quot; = Table.AddColumn(#&quot;Inserted Day&quot;, &quot;DayOfWeek&quot;, each Date.DayOfWeek( [Date] , first_day_of_week ), Int64.Type),
        #&quot;Inserted Day of Year&quot; = Table.AddColumn(#&quot;Inserted Day of Week&quot;, &quot;DayOfYear&quot;, each Date.DayOfYear([Date]), Int64.Type),
        #&quot;Inserted Day Name&quot; = Table.AddColumn(#&quot;Inserted Day of Year&quot;, &quot;DayOfWeekName&quot;, each Date.DayOfWeekName( [Date] , culture ), type text),
        #&quot;Inserted Year Name&quot; = Table.AddColumn(#&quot;Inserted Day Name&quot;, &quot;YearName&quot;, each &quot;Y&quot; &amp; Text.From( [Year] )  , type text  ),
        #&quot;Inserted Quarter Name&quot; = Table.AddColumn(#&quot;Inserted Year Name&quot;, &quot;QuarterName&quot;, each &quot;Q&quot; &amp; Text.From( [Quarter] ) , type text ),
        #&quot;Inserted Month Name&quot; = Table.AddColumn(#&quot;Inserted Quarter Name&quot;, &quot;MonthName&quot;, each Date.MonthName( [Date] , culture ), type text),
        #&quot;Inserted Week Name&quot; = Table.AddColumn(#&quot;Inserted Month Name&quot;, &quot;WeekName&quot;, each &quot;W&quot; &amp; Text.From( [WeekOfYear] ) , type text ),
        #&quot;Inserted Year Quarter&quot; = Table.AddColumn(#&quot;Inserted Week Name&quot;, &quot;YearQuarter&quot;, each [Year] * 100 + [Quarter] , Int64.Type ),
        #&quot;Inserted Year Month&quot; = Table.AddColumn(#&quot;Inserted Year Quarter&quot;, &quot;YearMonth&quot;, each [Year] * 100 + [Month] , Int64.Type ),
        #&quot;Inserted Year Week&quot; = Table.AddColumn(#&quot;Inserted Year Month&quot;, &quot;YearWeek&quot;, each [Year] * 100 + [WeekOfYear] , Int64.Type ),
        #&quot;Inserted Date Code&quot; = Table.AddColumn(#&quot;Inserted Year Week&quot;, &quot;DateCode&quot;, each [Year] * 10000 + [Month] * 100 + [DayOfMonth] , Int64.Type )
    in
        #&quot;Inserted Date Code&quot;in
    Value.ReplaceType( CreateCalendar , CalendarType )

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pandas的一些使用备忘]]></title>
        <id>https://svcvit.github.io/post/pandas_cheatsheet</id>
        <link href="https://svcvit.github.io/post/pandas_cheatsheet">
        </link>
        <updated>2019-08-07T07:04:43.000Z</updated>
        <content type="html"><![CDATA[<p>一些常用的操作，备注一下方便查找。</p>
<h3 id="读取表格数">读取表格数</h3>
<pre><code class="language-python">pd.read_excel(&quot;data.xlsx&quot;,&quot;sheet1&quot;)

#读取所有sheet
pd.read_excel(&quot;data.xlsx&quot;,sheet_name=None)
</code></pre>
<h3 id="读取数据参数">读取数据参数</h3>
<pre><code class="language-python">col_names = [a,b,c,d]
pd.read_csv(&quot;file_name.csv&quot;,names=col_names,header=0)
</code></pre>
<h3 id="删除重复数据">删除重复数据</h3>
<pre><code class="language-python">df.drop_duplicates(['col1'])
</code></pre>
<p>数组中支持按多列去重</p>
<h3 id="选择数据">选择数据</h3>
<pre><code class="language-python"># 所有的行，某一列
df.loc[:,&quot;col_name&quot;]
</code></pre>
<h3 id="透视表">透视表</h3>
<pre><code class="language-python">pd.pivot_table(df[df['年份']==2019],index=['col1','col2'],values = ['clo3'],aggfunc='count',fill_value=0)
</code></pre>
<h3 id="行列转换">行列转换</h3>
<pre><code class="language-python">out.unstack(level=1,fill_value=0)
</code></pre>
<h3 id="左右合并">左右合并</h3>
<pre><code class="language-python">pd.merge(df1, df2, how='left', left_on='key_name', right_on='key_name')
</code></pre>
<h3 id="查询列名">查询列名</h3>
<pre><code class="language-python">df.columns
</code></pre>
<h3 id="修改列名">修改列名</h3>
<pre><code class="language-python">df.rename(columns={&quot;old_name&quot;:&quot;new_name&quot;, &quot;old_name2&quot;:&quot;new_name2&quot;}, inplace = True)
</code></pre>
<h3 id="写入表格">写入表格</h3>
<pre><code class="language-python">with pd.ExcelWriter('output.xlsx') as writer:  
    df1.to_excel(writer, sheet_name=&quot;name1&quot;,index=False)
    df2.to_excel(writer, sheet_name=&quot;name2&quot;,index=False)
    df3.to_excel(writer, sheet_name=&quot;name3&quot;,index=False)
</code></pre>
<h3 id="上下合并">上下合并</h3>
<pre><code class="language-python">pd.concat([df1,df2],sort=False)
</code></pre>
<h3 id="左右合并-2">左右合并</h3>
<pre><code class="language-python">pd.concat([df1,df2],axis=1, sort=False)
</code></pre>
<h3 id="读取数据库">读取数据库</h3>
<pre><code class="language-python">engine = sqlalchemy.create_engine(&quot;postgresql://username:pwd@0.0.0.0/database&quot;)

with engine.connect() as conn:
		#读取数据
    pd.read_sql_table(&quot;table_name&quot;,conn,parse_dates=[&quot;日期&quot;])
		#写入数据
		df.to_sql(&quot;table_name&quot;, con=conn, if_exists='append')
		
		truncate_query = sqlalchemy.text(&quot;&quot;&quot;
        truncate  table &quot;ALL&quot;;
        &quot;&quot;&quot;)
		conn.execution_options(autocommit=True).execute(truncate_query)

engine.dispose()
</code></pre>
<h3 id="重置索引">重置索引</h3>
<pre><code class="language-python">df.reset_index(drop=True)
</code></pre>
<h3 id="基础统计">基础统计</h3>
<pre><code class="language-python">df.describe(include=[&quot;object&quot;])
</code></pre>
<h3 id="文本的操作">文本的操作</h3>
<pre><code class="language-python">#替换
df['col'].str.replace(&quot;a&quot;,&quot;b&quot;)
#查找
df['col'].str.contains(&quot;&quot;)
</code></pre>
<h3 id="删除列">删除列</h3>
<pre><code class="language-python">df.drop('col_name',axis = 1,inplace=True)
</code></pre>
<h3 id="删除行">删除行</h3>
<pre><code class="language-python">df.drop([row1,row1],axis = 0,inplace=True)
</code></pre>
<h3 id="排序">排序</h3>
<pre><code class="language-python">df.sort_values([col1,col2])
</code></pre>
<h3 id="筛选数据">筛选数据</h3>
<pre><code class="language-python">#注意：需要小括号和&amp;符号
df[(df['0']&gt;0.3) &amp; (df['1']&gt;0.7)]
</code></pre>
<h3 id="处理筛选后的数据">处理筛选后的数据</h3>
<pre><code class="language-python">data[drug].loc[(data[drug][&quot;剂量&quot;]==&quot;片&quot;),&quot;医生&quot;] = get_doctor(data[drug][data[drug][&quot;剂量&quot;]==&quot;片&quot;])
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[联想牌软路由]]></title>
        <id>https://svcvit.github.io/post/lenovo_router</id>
        <link href="https://svcvit.github.io/post/lenovo_router">
        </link>
        <updated>2019-07-26T05:03:21.000Z</updated>
        <content type="html"><![CDATA[<p>以前买的小马的v5的软路由，ES的cpu，风扇真的是吵，而且做工、电源、都是浓浓的山寨气息。无奈也没找到合适的小主机，也就一直用着了。上个月看到坛友的<a href="https://www.chiphell.com/thread-1988370-1-1.html">m720开箱贴</a>。</p>
<p>于是也在联想美国官网定了一台，加配了4口的网卡。因为担心砍单，所以就直接寄到美国朋友家里，今天刚送到国内，开箱分享一下。</p>
<p>我购买的是最乞丐的版本，配置如下：<br>
<img src="https://svcvit.github.io/post-images/1564117679467.png" alt=""></p>
<p>用了联想的8通道，含税价格这么多。总体来说比淘宝的软路由价格贵一点，但是真心比联想国行便宜。<br>
<img src="https://svcvit.github.io/post-images/1564117809052.jpg" alt=""></p>
<p>拍点照片：<br>
<img src="https://svcvit.github.io/post-images/1564117648781.JPG" alt=""><br>
<img src="https://svcvit.github.io/post-images/1564117648783.JPG" alt=""><br>
<img src="https://svcvit.github.io/post-images/1564117648784.JPG" alt=""><br>
<img src="https://svcvit.github.io/post-images/1564117648785.JPG" alt=""><br>
<img src="https://svcvit.github.io/post-images/1564117648786.JPG" alt=""><br>
<img src="https://svcvit.github.io/post-images/1564117648787.JPG" alt=""><br>
<img src="https://svcvit.github.io/post-images/1564117648788.JPG" alt=""><br>
<img src="https://svcvit.github.io/post-images/1564117648789.JPG" alt=""><br>
<img src="https://svcvit.github.io/post-images/1564117648790.JPG" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[领一张英国4G电话卡，大陆合法上网]]></title>
        <id>https://svcvit.github.io/post/CMLINK_UK_4G_SIM</id>
        <link href="https://svcvit.github.io/post/CMLINK_UK_4G_SIM">
        </link>
        <updated>2019-07-26T04:23:32.000Z</updated>
        <content type="html"><![CDATA[<p>众所周知，在大陆境内非法使用vpn、ssr等方式浏览境外网站，被定义为非法，所以各种翻墙方式都不一定稳定，特别是国家开大会，基本所有线路都是挂的。</p>
<p>前天看网上推荐，中国移动在英国提供的CMLINK电话卡，号码是英国本地号码，支持英国、欧盟、中国大陆、香港地区共享流量套餐使用，实测在大陆也可以正常访问国外Youtube等网站，应该是目前最合法的翻墙方式了。而且手机共享出来的热点，也能正常翻墙。</p>
<p>我去CMLINK的官网申请了一张，快递从广东发出，大概两天左右收到。</p>
<figure data-type="image" tabindex="1"><img src="https://svcvit.github.io/post-images/1564115668300.jpg" alt=""></figure>
<p>卡片这个样子：</p>
<figure data-type="image" tabindex="2"><img src="https://svcvit.github.io/post-images/1564115824141.JPG" alt=""></figure>
<figure data-type="image" tabindex="3"><img src="https://svcvit.github.io/post-images/1564115830020.JPG" alt=""></figure>
<p>充值会自动激活，如果不充值，打卡片包装后面印刷的服务热线，申请开通会员服务，也可以激活，热线有中文服务。激活即送500m的流量，免费使用。目前有几个套餐可以选择：</p>
<figure data-type="image" tabindex="4"><img src="https://svcvit.github.io/post-images/1564115886293.jpg" alt=""></figure>
<p>我选了一个最便宜的5.99英镑的套餐，用一段时间，看看稳定性如何。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://svcvit.github.io/post/hello-gridea</id>
        <link href="https://svcvit.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>